{"version":3,"file":"static/js/516.54e0a6df.chunk.js","mappings":"kLAGaA,GAAqBC,EAAAA,EAAAA,SAAOC,EAAAA,GAAPD,CAAH,sXAId,SAAAE,GAAC,OAAIA,EAAEC,MAAMC,YAAYC,MAAxB,IACH,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,EAAtB,IAGL,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,OAAnB,I,SCNCC,EAAe,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACnC,OACE,0BACE,SAACb,EAAD,CAAoBc,GAAIF,EAAxB,SAA+BC,KAGpC,C,4MCRYE,GAAad,EAAAA,EAAAA,SAAOe,EAAAA,GAAPf,CAAH,uUAKD,SAAAE,GAAC,OAAIA,EAAEC,MAAMK,OAAOQ,UAAnB,IACJ,SAAAd,GAAC,OAAIA,EAAEC,MAAMc,MAAMC,KAAlB,IAON,SAAAhB,GAAC,OAAIA,EAAEC,MAAMgB,QAAQC,MAApB,IAID,SAAAlB,GAAC,OAAIA,EAAEC,MAAMgB,QAAQC,MAApB,IAA8B,SAAAlB,GAAC,OAAIA,EAAEC,MAAMK,OAAOa,QAAnB,IAIjCC,EAActB,EAAAA,QAAAA,EAAH,kYAIP,SAAAE,GAAC,OAAIA,EAAEC,MAAMoB,MAAMC,OAAlB,IACD,SAAAtB,GAAC,OAAIA,EAAEC,MAAMC,YAAYC,MAAxB,IAIP,SAAAH,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,OAAnB,IAWCgB,EAAQzB,EAAAA,QAAAA,MAAH,uiBAKD,SAAAE,GAAC,OAAIA,EAAEC,MAAMoB,MAAMC,OAAlB,IACD,SAAAtB,GAAC,OAAIA,EAAEC,MAAMC,YAAYC,MAAxB,IACH,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUC,EAAtB,IACC,SAAAL,GAAC,OAAIA,EAAEC,MAAMuB,YAAYC,IAAxB,IAEP,SAAAzB,GAAC,OAAIA,EAAEC,MAAMK,OAAOoB,KAAnB,IAGK,SAAA1B,GAAC,OAAIA,EAAEC,MAAMG,UAAUuB,CAAtB,IAqBLC,GAAqB9B,EAAAA,EAAAA,SAAO+B,EAAAA,GAAP/B,CAAH,uCACpB,SAAAE,GAAC,OAAIA,EAAEC,MAAMK,OAAOa,QAAnB,IAGCW,GAAchC,EAAAA,EAAAA,SAAOiC,EAAAA,GAAPjC,CAAH,4iBAKT,SAAAE,GAAC,OAAIA,EAAEC,MAAMG,UAAUuB,CAAtB,IAGL,SAAA3B,GAAC,OAAIA,EAAEC,MAAMK,OAAOoB,KAAnB,IACA,SAAA1B,GAAC,OAAIA,EAAEC,MAAMgB,QAAQC,MAApB,IAKI,SAAAlB,GAAC,OAAIA,EAAEC,MAAMG,UAAU4B,CAAtB,IAKC,SAAAhC,GAAC,OAAIA,EAAEC,MAAMoB,MAAMX,IAAlB,IACH,SAAAV,GAAC,OAAIA,EAAEC,MAAMG,UAAUuB,CAAtB,IAKC,SAAA3B,GAAC,OAAIA,EAAEC,MAAMG,UAAU4B,CAAtB,IAMPC,EAAuBnC,EAAAA,QAAAA,IAAH,+CAIpBoC,EAAsBpC,EAAAA,QAAAA,OAAH,iMAYnBqC,EAAerC,EAAAA,QAAAA,OAAH,6hBAQR,SAAAE,GAAC,OAAIA,EAAEC,MAAMoB,MAAMC,OAAlB,IACD,SAAAtB,GAAC,OAAIA,EAAEC,MAAMC,YAAYC,MAAxB,IACH,SAAAH,GAAC,OAAIA,EAAEC,MAAMG,UAAUuB,CAAtB,IAKG,SAAA3B,GAAC,OAAIA,EAAEC,MAAMc,MAAMqB,GAAlB,IACJ,SAAApC,GAAC,OAAIA,EAAEC,MAAMoC,QAAQC,SAApB,IAEN,SAAAtC,GAAC,OAAIA,EAAEC,MAAMK,OAAOiC,KAAnB,IACU,SAAAvC,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,OAAnB,IAWViC,EAAM1C,EAAAA,QAAAA,IAAH,+JACJ,SAAAE,GAAC,OAAIA,EAAEC,MAAMK,OAAOiC,KAAnB,I,mBC5IPE,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KACJE,MAAM,0BACNC,SAAS,qBACZC,SAAUJ,EAAAA,KACPG,SAAS,wBACTE,IAAI,EAAG,+CACPC,QAAQ,QAAS,sCAGTC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,UAAS,YAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAiB,WAKrBD,EAJqB,aAAjBD,EAIY,WAHE,OAInB,EAED,OACE,SAAC,KAAD,CACEG,cAAe,CAAEZ,MAAO,GAAIE,SAAU,IACtCL,iBAAkBA,EAClBgB,SAAQ,mCAAE,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,cAAjB,SACFT,GAASU,EAAAA,EAAAA,IAAMF,IADb,OAERC,GAAc,GAFN,2CAAF,wDAHV,SAQG,gBAAGE,EAAH,EAAGA,aAAcH,EAAjB,EAAiBA,OAAQI,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,QAAjC,OACC,UAACnD,EAAD,YACE,SAACQ,EAAD,sBACA,UAACG,EAAD,oBAEE,SAACO,EAAD,CACEkC,UACEF,EAAOlB,OAASmB,EAAQnB,MAAQ,eAAiB,aAEnDqB,KAAK,QACLC,KAAK,QACLC,YAAY,cACZC,MAAM,kDACNC,MAAOX,EAAOd,SAEhB,SAAChB,EAAD,CAAoBsC,KAAK,QAAQI,UAAU,YAE7C,UAAC/C,EAAD,uBAEE,UAACU,EAAD,YACE,SAACH,EAAD,CACEkC,UACEF,EAAOhB,UAAYiB,EAAQjB,SACvB,eACA,aAENmB,KAAMZ,EACNa,KAAK,WACLC,YAAY,iBACZC,MAAM,wHACNC,MAAOX,EAAOZ,YAGhB,SAACZ,EAAD,CAAqB+B,KAAK,SAASM,QAAShB,EAA5C,SACoB,aAAjBF,GACC,gBAAKmB,OAAO,KAAKC,MAAM,KAAKC,KAAK,UAAjC,UACE,gBAAKC,KAAMC,EAAAA,EAAS,kBAGtB,gBAAKJ,OAAO,KAAKC,MAAM,KAAKC,KAAK,UAAjC,UACE,gBAAKC,KAAMC,EAAAA,EAAS,uBAK5B,SAAChD,EAAD,CAAoBsC,KAAK,WAAWI,UAAU,YAEhD,UAACnC,EAAD,CAAc8B,KAAK,SAASY,SAAUhB,EAAtC,UACGA,EAAe,aAAe,UAC/B,SAACrB,EAAD,WACE,gBAAKmC,KAAMC,EAAAA,EAAS,uBAlD3B,GAyDN,E,8BCzGYE,EAAYhF,EAAAA,QAAAA,IAAH,oMASA,SAAAE,GAAC,OAAIA,EAAEC,MAAMK,OAAOyE,MAAnB,IAGVC,EAAclF,EAAAA,QAAAA,IAAH,qVAkBXmF,EAAanF,EAAAA,QAAAA,IAAH,8YAOGoF,EAMEC,GC3B5B,EAdkB,WAChB,OACE,UAACL,EAAD,YACE,SAACE,EAAD,WACE,SAAC/B,EAAD,OAGF,SAACzC,EAAA,EAAD,CAAcC,KAAK,YAAYC,KAAK,aAEpC,SAACuE,EAAD,MAGL,C","sources":["components/AuthNavigate/AuthNavigate.styled.jsx","components/AuthNavigate/AuthNavigate.jsx","components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledAuthNavigate = styled(NavLink)`\n  display: block;\n\n  text-align: center;\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: ${p => p.theme.fontSizes.xs};\n  line-height: 1.16;\n\n  color: ${p => p.theme.colors.primary};\n  text-decoration: underline;\n\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n    line-height: 1.33;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { StyledAuthNavigate } from './AuthNavigate.styled';\n\nexport const AuthNavigate = ({ link, text }) => {\n  return (\n    <div>\n      <StyledAuthNavigate to={link}>{text}</StyledAuthNavigate>\n    </div>\n  );\n};\n\nAuthNavigate.propTypes = {\n  link: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 40px 24px;\n\n  background-color: ${p => p.theme.colors.background};\n  border-radius: ${p => p.theme.radii.small};\n\n  @media screen and (min-width: 768px) {\n    padding: 40px;\n  }\n\n  .ValidInput {\n    border: ${p => p.theme.borders.normal} rgba(220, 227, 229, 0.6);\n  }\n\n  .InvalidInput {\n    border: ${p => p.theme.borders.normal} ${p => p.theme.colors.redError};\n  }\n`;\n\nexport const StyledTitle = styled.p`\n  margin-top: 0;\n  margin-bottom: 32px;\n\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: 18px;\n  line-height: 1.33;\n\n  color: ${p => p.theme.colors.primary};\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 24px;\n    line-height: 1;\n  }\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: ${p => p.theme.fontSizes.xs};\n  line-height: ${p => p.theme.lineHeights.body};\n\n  color: ${p => p.theme.colors.black};\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    line-height: 1.21;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 24px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 18px;\n    }\n  }\n\n  &:nth-of-type(2) {\n    margin-bottom: 32px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 48px;\n    }\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.redError};\n`;\n\nexport const StyledField = styled(Field)`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 14px;\n\n  font-size: ${p => p.theme.fontSizes.s};\n  line-height: 1.29px;\n\n  color: ${p => p.theme.colors.black};\n  border: ${p => p.theme.borders.normal} rgba(17, 17, 17, 0.15);\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    padding: 18px;\n    font-size: ${p => p.theme.fontSizes.m};\n    line-height: 1.12;\n  }\n\n  &::placeholder {\n    font-family: ${p => p.theme.fonts.text};\n    font-size: ${p => p.theme.fontSizes.s};\n    line-height: 1.29;\n    color: rgba(17, 17, 17, 0.15);\n\n    @media screen and (min-width: 768px) {\n      font-size: ${p => p.theme.fontSizes.m};\n      line-height: 1.12;\n    }\n  }\n`;\n\nexport const PasswordInputWrapper = styled.div`\n  position: relative;\n`;\n\nexport const StyledVisibilityBtn = styled.button`\n  position: absolute;\n  right: 18px;\n  top: 50%;\n  transform: translateY(-50%);\n\n  background: transparent;\n  border: none;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const StyledButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 11px;\n  padding-top: 14px;\n  padding-bottom: 14px;\n\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: ${p => p.theme.fontSizes.s};\n  line-height: 1.28px;\n  letter-spacing: -0.02em;\n\n  border: none;\n  border-radius: ${p => p.theme.radii.big};\n  box-shadow: ${p => p.theme.shadows.boxShadow};\n\n  color: ${p => p.theme.colors.white};\n  background-color: ${p => p.theme.colors.primary};\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n    line-height: 1.33;\n    padding-top: 16px;\n    padding-bottom: 16px;\n  }\n`;\n\nexport const Svg = styled.svg`\n  stroke: ${p => p.theme.colors.white};\n  height: 18px;\n  width: 18px;\n\n  @media screen and (min-width: 768px) {\n    height: 20px;\n    width: 20px;\n  }\n`;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\nimport { logIn } from 'redux/auth/operations';\nimport {\n  StyledForm,\n  StyledTitle,\n  StyledButton,\n  Label,\n  StyledField,\n  StyledErrorMessage,\n  PasswordInputWrapper,\n  StyledVisibilityBtn,\n  Svg,\n} from './LoginForm.styled';\n\nimport sprite from 'icons/sprite.svg';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters long')\n    .matches(/^\\S*$/, 'Password must not contain spaces'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const [passwordType, setPasswordType] = useState('password');\n\n  const togglePassword = () => {\n    if (passwordType === 'password') {\n      setPasswordType('text');\n      return;\n    }\n    setPasswordType('password');\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={async (values, { setSubmitting }) => {\n        await dispatch(logIn(values));\n        setSubmitting(false);\n      }}\n    >\n      {({ isSubmitting, values, errors, touched }) => (\n        <StyledForm>\n          <StyledTitle>Log In</StyledTitle>\n          <Label>\n            Email\n            <StyledField\n              className={\n                errors.email && touched.email ? 'InvalidInput' : 'ValidInput'\n              }\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              title=\"Email must be in the format username@domain.com\"\n              value={values.email}\n            />\n            <StyledErrorMessage name=\"email\" component=\"div\" />\n          </Label>\n          <Label>\n            Password\n            <PasswordInputWrapper>\n              <StyledField\n                className={\n                  errors.password && touched.password\n                    ? 'InvalidInput'\n                    : 'ValidInput'\n                }\n                type={passwordType}\n                name=\"password\"\n                placeholder=\"Enter password\"\n                title=\"Password must contain at least one number, one lowercase and one uppercase letter, and be at least 6 characters long.\"\n                value={values.password}\n              />\n\n              <StyledVisibilityBtn type=\"button\" onClick={togglePassword}>\n                {passwordType === 'password' ? (\n                  <svg height=\"20\" width=\"20\" fill=\"#111111\">\n                    <use href={sprite + '#icon-hide'}></use>\n                  </svg>\n                ) : (\n                  <svg height=\"20\" width=\"20\" fill=\"#111111\">\n                    <use href={sprite + '#icon-show'}></use>\n                  </svg>\n                )}\n              </StyledVisibilityBtn>\n            </PasswordInputWrapper>\n            <StyledErrorMessage name=\"password\" component=\"div\" />\n          </Label>\n          <StyledButton type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Submitting' : 'Log in'}\n            <Svg>\n              <use href={sprite + '#icon-enter'}></use>\n            </Svg>\n          </StyledButton>\n        </StyledForm>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\nimport goose_1x from 'images/loginPage/desktop_loginPage.png';\nimport goose_2x from 'images/loginPage/desktop_loginPage@2x.png';\n\nexport const Container = styled.div`\n  position: relative;\n  min-height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background-color: ${p => p.theme.colors.bgBlue};\n`;\n\nexport const FormWrapper = styled.div`\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 18px;\n\n  @media screen and (max-width: 374px) {\n    width: 100%;\n    max-width: 335px;\n  }\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 480px;\n    margin-bottom: 24px;\n  }\n`;\n\nexport const ImgWrapper = styled.div`\n  position: absolute;\n  width: 368px;\n  height: 521px;\n  right: 60px;\n  bottom: 19px;\n\n  background-image: url(${goose_1x});\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n\n  @media screen and (min-device-pixel-ratio: 2) {\n    background-image: url(${goose_2x});\n  }\n  @media screen and (max-width: 1439px) {\n    display: none;\n  }\n`;\n","import React from 'react';\n\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { AuthNavigate } from 'components/AuthNavigate/AuthNavigate';\nimport { Container, FormWrapper, ImgWrapper } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <Container>\n      <FormWrapper>\n        <LoginForm />\n      </FormWrapper>\n\n      <AuthNavigate link=\"/register\" text=\"Sign up\" />\n\n      <ImgWrapper />\n    </Container>\n  );\n};\n\nexport default LoginPage;\n"],"names":["StyledAuthNavigate","styled","NavLink","p","theme","fontWeights","medium","fontSizes","xs","colors","primary","AuthNavigate","link","text","to","StyledForm","Form","background","radii","small","borders","normal","redError","StyledTitle","fonts","heading","Label","lineHeights","body","black","s","StyledErrorMessage","ErrorMessage","StyledField","Field","m","PasswordInputWrapper","StyledVisibilityBtn","StyledButton","big","shadows","boxShadow","white","Svg","validationSchema","Yup","shape","email","required","password","min","matches","LoginForm","dispatch","useDispatch","useState","passwordType","setPasswordType","togglePassword","initialValues","onSubmit","values","setSubmitting","logIn","isSubmitting","errors","touched","className","type","name","placeholder","title","value","component","onClick","height","width","fill","href","sprite","disabled","Container","bgBlue","FormWrapper","ImgWrapper","goose_1x","goose_2x"],"sourceRoot":""}