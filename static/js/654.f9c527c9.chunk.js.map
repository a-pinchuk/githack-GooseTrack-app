{"version":3,"file":"static/js/654.f9c527c9.chunk.js","mappings":"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","sources":["components/PasswordRecoveryForm/PasswordRecoveryForm.styled.jsx","components/PasswordRecoveryForm/PasswordRecoveryForm.jsx","pages/PasswordRecoveryPage/PasswordRecoveryPage.styled.jsx","pages/PasswordRecoveryPage/PasswordRecoveryPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  padding: 40px 24px;\n\n  background-color: ${p => p.theme.colors.background};\n  border-radius: ${p => p.theme.radii.small};\n\n  @media screen and (max-width: 345px) {\n    margin-left: 5px;\n    margin-right: 5px;\n  }\n\n  @media screen and (min-width: 768px) {\n    padding: 40px;\n  }\n`;\n\nexport const Title = styled.p`\n  margin-top: 0;\n  margin-bottom: 32px;\n\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: 18px;\n  line-height: 1.33;\n\n  color: ${p => p.theme.colors.primary};\n  text-shadow: 0px 47px 355px rgba(0, 0, 0, 0.07),\n    0px 9.4px 57.6875px rgba(0, 0, 0, 0.035);\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 40px;\n    font-size: 24px;\n    line-height: 1;\n  }\n`;\n\nexport const Label = styled.label`\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: ${p => p.theme.fontSizes.xs};\n  line-height: ${p => p.theme.lineHeights.body};\n\n  color: ${p => p.theme.colors.black};\n\n  @media screen and (min-width: 768px) {\n    font-size: ${p => p.theme.fontSizes.s};\n    line-height: 1.21;\n  }\n\n  &:not(:last-child) {\n    margin-bottom: 24px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 18px;\n    }\n  }\n\n  &:nth-of-type(3) {\n    margin-bottom: 32px;\n\n    @media screen and (min-width: 768px) {\n      margin-bottom: 48px;\n    }\n  }\n\n  &.is-valid {\n    color: ${p => p.theme.colors.greenValid};\n  }\n\n  &.is-invalid {\n    color: ${p => p.theme.colors.redErrorLight};\n  }\n\n  & p {\n    margin: 0;\n    padding: 0;\n    margin-top: 8px;\n    margin-left: 18px;\n    color: ${p => p.theme.colors.greenValid};\n  }\n\n  & .error-success {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`;\n\nexport const Field = styled(FormikField)`\n  box-sizing: border-box;\n  width: 100%;\n  padding: 14px;\n\n  font-size: ${p => p.theme.fontSizes.s};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  line-height: 1.29px;\n\n  color: ${p => p.theme.colors.black};\n  outline: none;\n  border: ${p => p.theme.borders.normal} rgba(17, 17, 17, 0.15);\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    padding: 18px;\n    font-size: ${p => p.theme.fontSizes.m};\n    line-height: 1.12;\n  }\n\n  &::placeholder {\n    font-family: ${p => p.theme.fonts.text};\n    font-size: ${p => p.theme.fontSizes.s};\n    line-height: 1.29;\n    color: rgba(17, 17, 17, 0.15);\n\n    @media screen and (min-width: 768px) {\n      font-size: ${p => p.theme.fontSizes.m};\n      line-height: 1.12;\n    }\n  }\n\n  &:hover,\n  &:focus {\n    border: ${p => p.theme.borders.normal} ${p => p.theme.colors.black};\n  }\n\n  &.is-valid {\n    border: ${p => p.theme.borders.normal} ${p => p.theme.colors.greenValid};\n  }\n\n  &.is-invalid {\n    border: ${p => p.theme.borders.normal} ${p => p.theme.colors.redErrorLight};\n  }\n`;\n\nexport const PasswordInputWrapper = styled.div`\n  position: relative;\n  margin-top: 8px;\n`;\n\nexport const InputWrapper = styled.div`\n  position: relative;\n  margin-top: 8px;\n`;\n\nexport const VisibilityBtn = styled.button`\n  position: absolute;\n  right: 18px;\n  top: 50%;\n  transform: translateY(-50%);\n\n  padding: 0;\n  background: transparent;\n  border: none;\n  outline: none;\n  cursor: pointer;\n\n  & svg.is-valid {\n    stroke: ${p => p.theme.colors.greenValid};\n    fill: ${p => p.theme.colors.greenValid};\n  }\n\n  & svg.is-invalid {\n    stroke: ${p => p.theme.colors.redErrorLight};\n    fill: ${p => p.theme.colors.redErrorLight};\n  }\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 11px;\n  padding-top: 14px;\n  padding-bottom: 14px;\n\n  font-family: ${p => p.theme.fonts.heading};\n  font-weight: ${p => p.theme.fontWeights.medium};\n  font-size: ${p => p.theme.fontSizes.s};\n  line-height: 1.28px;\n  letter-spacing: -0.02em;\n\n  border: none;\n  border-radius: ${p => p.theme.radii.big};\n  box-shadow: ${p => p.theme.shadows.boxShadow};\n\n  color: ${p => p.theme.colors.white};\n  background-color: ${p => p.theme.colors.primary};\n  cursor: pointer;\n\n  @media screen and (min-width: 768px) {\n    font-size: 18px;\n    line-height: 1.33;\n    padding-top: 16px;\n    padding-bottom: 16px;\n  }\n\n  &:hover,\n  &:focus {\n    background-color: ${p => p.theme.colors.secondary};\n  }\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  margin-left: 18px;\n  margin-top: 8px;\n  color: ${p => p.theme.colors.redError};\n`;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\n\nimport { logIn } from 'redux/auth/operations';\nimport {\n  Form,\n  Title,\n  Label,\n  Field,\n  ErrorMessage,\n  InputWrapper,\n  PasswordInputWrapper,\n  VisibilityBtn,\n  Button,\n} from './PasswordRecoveryForm.styled';\n\nimport sprite from 'icons/sprite.svg';\n\nconst validationSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('This is an ERROR email')\n    .required('Email is required'),\n  password: Yup.string()\n    .required('Password is required')\n    .min(6, 'Password must be at least 6 characters long')\n    .matches(/^\\S*$/, 'Password must not contain spaces'),\n  passwordConfirm: Yup.string()\n    .required('Password confirmation is required')\n    .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n});\n\nexport const PasswordRecoveryForm = () => {\n  const dispatch = useDispatch();\n\n  const [passwordType, setPasswordType] = useState('password');\n  const [confirmPasswordType, setConfirmPasswordType] = useState('password');\n\n  const togglePassword = () => {\n    if (passwordType === 'password') {\n      setPasswordType('text');\n      return;\n    }\n    setPasswordType('password');\n  };\n\n  const toggleConfirmPassword = () => {\n    if (confirmPasswordType === 'password') {\n      setConfirmPasswordType('text');\n      return;\n    }\n    setConfirmPasswordType('password');\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '', passwordConfirm: '' }}\n      validationSchema={validationSchema}\n      onSubmit={async (values, { setSubmitting }) => {\n        await dispatch(logIn(values));\n        setSubmitting(false);\n      }}\n    >\n      {({ isSubmitting, values, errors, touched }) => {\n        const isValid = field =>\n          touched[field] && errors[field]\n            ? 'is-invalid'\n            : touched[field]\n            ? 'is-valid'\n            : '';\n\n        return (\n          <Form>\n            <Title>Password recovery</Title>\n\n            <Label className={isValid('email')}>\n              Email\n              <InputWrapper>\n                <Field\n                  className={isValid('email')}\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Enter email\"\n                  title=\"Email must be in the format username@domain.com\"\n                  value={values.email}\n                />\n\n                {isValid('email') === 'is-valid' && (\n                  <svg height=\"20\" width=\"20\" className=\"error-success\">\n                    <use href={sprite + '#icon-input-success'}></use>\n                  </svg>\n                )}\n                {isValid('email') === 'is-invalid' && (\n                  <svg height=\"20\" width=\"20\" className=\"error-success\">\n                    <use href={sprite + '#icon-input-error'}></use>\n                  </svg>\n                )}\n              </InputWrapper>\n              {isValid('email') === 'is-valid' && (\n                <p>This is a CORRECT email</p>\n              )}\n              <ErrorMessage name=\"email\" component=\"div\" />\n            </Label>\n\n            <Label className={isValid('password')}>\n              New Password\n              <PasswordInputWrapper>\n                <Field\n                  className={isValid('password')}\n                  type={passwordType}\n                  name=\"password\"\n                  placeholder=\"Enter password\"\n                  title=\"Password must contain at least one number, one lowercase and one uppercase letter, and be at least 6 characters long.\"\n                  value={values.password}\n                />\n\n                <VisibilityBtn type=\"button\" onClick={togglePassword}>\n                  {passwordType === 'password' ? (\n                    <svg\n                      height=\"20\"\n                      width=\"20\"\n                      stroke=\"#111111\"\n                      className={isValid('password')}\n                    >\n                      <use href={sprite + '#icon-hide'}></use>\n                    </svg>\n                  ) : (\n                    <svg\n                      height=\"20\"\n                      width=\"20\"\n                      stroke=\"#111111\"\n                      className={isValid('password')}\n                    >\n                      <use href={sprite + '#icon-show'}></use>\n                    </svg>\n                  )}\n                </VisibilityBtn>\n              </PasswordInputWrapper>\n              {isValid('password') === 'is-valid' && (\n                <p>This is a CORRECT password</p>\n              )}\n              <ErrorMessage name=\"password\" component=\"div\" />\n            </Label>\n\n            <Label className={isValid('passwordConfirm')}>\n              Confirm Password\n              <PasswordInputWrapper>\n                <Field\n                  className={isValid('passwordConfirm')}\n                  type={confirmPasswordType}\n                  name=\"passwordConfirm\"\n                  placeholder=\"Confirm password\"\n                  title=\"Please confirm your password\"\n                  value={values.passwordConfirm}\n                />\n\n                <VisibilityBtn type=\"button\" onClick={toggleConfirmPassword}>\n                  {confirmPasswordType === 'password' ? (\n                    <svg\n                      height=\"20\"\n                      width=\"20\"\n                      stroke=\"#111111\"\n                      className={isValid('passwordConfirm')}\n                    >\n                      <use href={sprite + '#icon-hide'}></use>\n                    </svg>\n                  ) : (\n                    <svg\n                      height=\"20\"\n                      width=\"20\"\n                      stroke=\"#111111\"\n                      className={isValid('passwordConfirm')}\n                    >\n                      <use href={sprite + '#icon-show'}></use>\n                    </svg>\n                  )}\n                </VisibilityBtn>\n              </PasswordInputWrapper>\n              {isValid('passwordConfirm') === 'is-valid' && (\n                <p>This is a CORRECT password confirmation</p>\n              )}\n              <ErrorMessage name=\"passwordConfirm\" component=\"div\" />\n            </Label>\n\n            <Button type=\"submit\" disabled={isSubmitting}>\n              {isSubmitting ? 'Submitting' : 'Reset Password'}\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  position: relative;\n  min-height: 100vh;\n\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  background-color: ${p => p.theme.colors.bgBlue};\n`;\n\nexport const FormWrapper = styled.div`\n  margin-right: auto;\n  margin-left: auto;\n  margin-bottom: 18px;\n\n  @media screen and (max-width: 374px) {\n    width: 100%;\n    max-width: 335px;\n  }\n  @media screen and (min-width: 375px) {\n    width: 335px;\n  }\n  @media screen and (min-width: 768px) {\n    width: 480px;\n    margin-bottom: 24px;\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { updateAccessToken } from 'redux/auth/authSlice';\nimport { PasswordRecoveryForm } from 'components/PasswordRecoveryForm/PasswordRecoveryForm';\n\nimport { Container, FormWrapper } from './PasswordRecoveryPage.styled';\n\nconst PasswordRecoveryPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const accessToken = window.location?.search.split('=')[1];\n\n    dispatch(updateAccessToken(accessToken));\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <FormWrapper>\n        <PasswordRecoveryForm />\n      </FormWrapper>\n    </Container>\n  );\n};\n\nexport default PasswordRecoveryPage;\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","p","theme","colors","background","radii","small","Title","_templateObject2","fonts","heading","fontWeights","medium","primary","Label","_templateObject3","fontSizes","xs","lineHeights","body","black","s","greenValid","redErrorLight","Field","FormikField","_templateObject4","borders","normal","m","text","PasswordInputWrapper","_templateObject5","InputWrapper","_templateObject6","VisibilityBtn","_templateObject7","Button","_templateObject8","big","shadows","boxShadow","white","secondary","ErrorMessage","FormikErrorMessage","_templateObject9","redError","validationSchema","Yup","shape","email","required","password","min","matches","passwordConfirm","oneOf","PasswordRecoveryForm","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","passwordType","setPasswordType","_useState3","_useState4","confirmPasswordType","setConfirmPasswordType","togglePassword","toggleConfirmPassword","_jsx","Formik","initialValues","onSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","values","_ref","setSubmitting","_context","prev","next","logIn","stop","_x","_x2","apply","arguments","children","_ref3","isSubmitting","errors","touched","isValid","field","_jsxs","className","type","name","placeholder","title","value","height","width","href","sprite","component","onClick","stroke","disabled","Container","bgBlue","FormWrapper","useEffect","_window$location","accessToken","window","location","search","split","updateAccessToken"],"sourceRoot":""}