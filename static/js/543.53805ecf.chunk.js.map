{"version":3,"file":"static/js/543.53805ecf.chunk.js","mappings":"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","sources":["components/MonthCalendarHead/MonthCalendarHead.styled.js","components/MonthCalendarHead/MonthCalendarHead.js","components/CalendarTable/CalendarTable.styled.js","components/CalendarTable/CalendarTable.js","components/ChoosedMonth/ChoosedMonth.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const DaysWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  margin-bottom: 14px;\n  padding: 16px 0 16px 0;\n  height: 50px;\n  max-width: 100%;\n\n  /* font-family: \"Inter\"; */\n  font-style: normal;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.12;\n\n  background: #ffffff;\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    height: 46px;\n    margin-bottom: 14px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    height: 46px;\n    margin-bottom: 15px;\n  }\n`;\n\nexport const 小ellOfDay = styled.div`\n  text-align: center;\n  color: ${props => (props.isWeekend ? '#3E85F3' : '#343434')};\n`;\n","import React from 'react';\nimport { DaysWrapper, 小ellOfDay } from './MonthCalendarHead.styled';\nimport moment from 'moment';\nimport { useMediaQuery } from 'react-responsive';\n\nexport const MonthCalendarHead = () => {\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  // const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 1439 });\n  // const isDesktop = useMediaQuery({ minWidth: 1440 });\n\n  const daysArray = [...Array(7)].map((_, i) => {\n    if (isMobile) {\n      return moment()\n        .day(i + 1)\n        .format('ddd')\n        .toUpperCase()[0];\n    }\n    return moment()\n      .day(i + 1)\n      .format('ddd')\n      .toUpperCase();\n  });\n\n  return (\n    <DaysWrapper>\n      {daysArray.map((day, i) => (\n        <小ellOfDay key={i} isWeekend={i === 5 || i === 6}>\n          {day}\n        </小ellOfDay>\n      ))}\n    </DaysWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const CalendarGridWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-template-rows: repeat(6, 1fr);\n  grid-gap: 1px;\n  max-width: 100%;\n\n  border: 1px solid rgba(220, 227, 229, 0.8);\n  overflow: hidden;\n  background: rgba(220, 227, 229, 0.8);\n  border-radius: 8px;\n`;\n\nexport const CellWrapper = styled.div`\n  min-width: 47px;\n  height: 94px;\n  padding: 5px 2px;\n  overflow: hidden;\n\n  background-color: #ffff;\n\n  color: ${props =>\n    props.isSelectedMonth ? '#343434' : 'rgba(52, 52, 52, 0.3)'};\n\n  @media screen and (min-width: 768px) {\n    height: 144px;\n    min-width: calc(100px-6px);\n    padding: 14px 4px 2px;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 14px 8px 2px;\n    height: 125px;\n  }\n`;\n\nexport const RowInCeil = styled.div`\n  display: flex;\n  margin-bottom: 20px;\n  justify-content: ${props =>\n    props.justifyContent ? props.justifyContent : 'flex-start'};\n\n  @media screen and (min-width: 768px) {\n    margin-bottom: 20px;\n  }\n  @media screen and (min-width: 1440px) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const DayWrapper = styled.div`\n  width: 20px;\n  height: 22px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n\n  margin-right: 2px;\n\n  /* font-family: \"Inter\"; */\n  font-style: normal;\n  font-weight: 700;\n  font-size: 12px;\n  line-height: 1.17;\n  /* identical to box height, or 117% */\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n\n    font-size: 16px;\n    line-height: 1.12;\n    margin-right: 10px;\n  }\n`;\n\nexport const CurrentDay = styled.span`\n  width: 100%;\n  height: 100%;\n\n  display: flex;\n\n  color: #ffffff;\n\n  align-items: center;\n  justify-content: center;\n  padding: 4px 8px;\n\n  background: #3e85f3;\n  border-radius: 8px;\n\n  @media screen and (min-width: 768px) {\n    width: 27px;\n    height: 26px;\n\n    font-size: 16px;\n    line-height: 1.12;\n  }\n`;\n\nexport const ShowDayWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const TaskList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  gap: 2px;\n  width: 100%;\n  padding: 0;\n  margin: 0;\n\n  /* font-family: \"Inter\"; */\n  font-style: normal;\n  font-weight: 700;\n  font-size: 10px;\n  line-height: 1.4;\n\n  list-style: none;\n`;\n\nexport const TaskItem = styled.li`\n  padding: 4px 4px 4px 4px;\n\n  border-radius: 8px;\n\n  background-color: ${props => {\n    switch (props.priority) {\n      case 'low':\n        return '#72C2F8';\n      case 'medium':\n        return '#FCF0D4';\n      case 'high':\n        return '#FFD2DD';\n      default:\n        return '#FFD2DD';\n    }\n  }};\n\n  color: ${props => {\n    switch (props.priority) {\n      case 'low':\n        return '#3E85F3';\n      case 'medium':\n        return '#F3B249';\n      case 'high':\n        return '#EA3D65';\n      default:\n        return '#72C2F8';\n    }\n  }};\n\n  @media screen and (min-width: 768px) {\n    padding: 4px 10px 4px 12px;\n\n    font-size: 14px;\n    line-height: 1.29;\n  }\n\n  @media screen and (min-width: 1440px) {\n    padding: 4px 15px 4px 12px;\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\n\nimport {\n  CalendarGridWrapper,\n  CellWrapper,\n  RowInCeil,\n  DayWrapper,\n  CurrentDay,\n  ShowDayWrapper,\n  TaskList,\n  TaskItem,\n} from './CalendarTable.styled';\nimport moment from 'moment';\n\nexport const CalendarTable = ({ startDay, today }) => {\n  const [tasks, setTasks] = useState([]);\n\n  const isMobile = useMediaQuery({ maxWidth: 767 });\n  const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 1439 });\n  // const isDesktop = useMediaQuery({ minWidth: 1440 });\n\n  const totalDays = 42;\n\n  let maxLengthOfTaskTitle = null;\n\n  if (isMobile) {\n    maxLengthOfTaskTitle = 4;\n  } else if (isTablet) {\n    maxLengthOfTaskTitle = 6;\n  } else {\n    maxLengthOfTaskTitle = 10;\n  }\n\n  const cutString = str => {\n    if (str.length > maxLengthOfTaskTitle) {\n      return str.substring(0, maxLengthOfTaskTitle) + '...';\n    }\n    return str;\n  };\n\n  const day = startDay.clone().subtract(1, 'day');\n  const daysArray = [...Array(totalDays)].map(() => day.add(1, 'day').clone());\n\n  const isCurrentDay = day => moment().isSame(day, 'day');\n  const isSelectedMonth = day => today.isSame(day, 'month');\n\n  useEffect(() => {\n    fetch('https://githack-goosetrack.onrender.com/api/tasks')\n      .then(res => res.json())\n      .then(res => setTasks(res.data));\n  }, []);\n\n  let dayTasksFiltered = [];\n\n  const filterTask = calendarDay => {\n    dayTasksFiltered = [\n      ...tasks.filter(task => task.date === calendarDay.format('YYYY-MM-DD')),\n    ];\n    return dayTasksFiltered;\n  };\n\n  //   {\n  // \"_id\": \"647a36e401a3371dd3c043d8\",\n  // \"title\": \"My task  medium done 09:39-10:01\",\n  // \"date\": \"2023-06-04\",\n  // \"start\": \"09:39\",\n  // \"end\": \"10:01\",\n  // \"priority\": \"medium\",\n  // \"category\": \"done\",\n  // \"createdAt\": \"2023-06-02T18:37:25.130Z\",\n  // \"updatedAt\": \"2023-06-02T18:37:25.130Z\"\n  // }\n\n  return (\n    <CalendarGridWrapper>\n      {daysArray.map(dayItem => (\n        <CellWrapper\n          key={dayItem.format('DDMMYYYY')}\n          isSelectedMonth={isSelectedMonth(dayItem)}\n        >\n          <RowInCeil justifyContent={'flex-end'}>\n            <ShowDayWrapper>\n              <DayWrapper>\n                {!isCurrentDay(dayItem) ? (\n                  <span>{dayItem.format('D')}</span>\n                ) : (\n                  <CurrentDay>{dayItem.format('D')}</CurrentDay>\n                )}\n              </DayWrapper>\n            </ShowDayWrapper>\n          </RowInCeil>\n          {filterTask(dayItem).length > 0 && (\n            <TaskList>\n              {dayTasksFiltered.map(task => (\n                <TaskItem key={task._id} priority={task.priority}>\n                  {cutString(task.title)}\n                </TaskItem>\n              ))}\n            </TaskList>\n          )}\n        </CellWrapper>\n      ))}\n    </CalendarGridWrapper>\n  );\n};\n","import React from 'react';\nimport { MonthCalendarHead } from '../MonthCalendarHead/MonthCalendarHead';\nimport { CalendarTable } from '../CalendarTable/CalendarTable';\n\nexport const ChoosedMonth = ({ today, startDay }) => {\n  return (\n    <div>\n      <MonthCalendarHead />\n      <CalendarTable startDay={startDay} today={today} />\n    </div>\n  );\n};\n"],"names":["DaysWrapper","styled","小ellOfDay","props","isWeekend","MonthCalendarHead","isMobile","useMediaQuery","maxWidth","daysArray","Array","map","_","i","moment","day","format","toUpperCase","CalendarGridWrapper","CellWrapper","isSelectedMonth","RowInCeil","justifyContent","DayWrapper","CurrentDay","ShowDayWrapper","TaskList","TaskItem","priority","CalendarTable","startDay","today","useState","tasks","setTasks","isTablet","minWidth","maxLengthOfTaskTitle","clone","subtract","add","isCurrentDay","isSame","useEffect","fetch","then","res","json","data","dayTasksFiltered","dayItem","calendarDay","filter","task","date","length","str","title","substring","_id","ChoosedMonth"],"sourceRoot":""}